import VPlay 2.0
import QtQuick 2.0
import QtQuick.Dialogs 1.1
import QtQuick.Window 2.1
import "../common"

SceneBase {


  id:gameScene
  width: 320
  height: 480
  Tile{}
  property int gridWidth: 300 // width and height of the game grid
  property int gridSizeGame: 4
  property int gridSizeGameSquared: gridSizeGame*gridSizeGame
  property var emptyCells // mang chua so
  property var tileItems:  new Array(gridSizeGameSquared)


  property string activeLevelFileName

  property variant activeLevel


  property int score: 0
  property int countdown: 0
  property bool gameRunning: countdown == 0

  function setLevel(fileName) {
    activeLevelFileName = fileName
  }


  // Man hinh chua background
  Rectangle {
    id: background

    anchors.fill: gameScene.gameWindowAnchorItem
    color: "#81c2be"
    border.width: 5
    border.color: "#d563e4"
    radius: 5
  }


  Connections {
    target: activeLevel !== undefined ? activeLevel : null
    onRectanglePressed: {
      // only increase score when game is running
      if(gameRunning) {
        score++
         gameScene.state = "playing"

      }
    }
  }


  // name of the current level
  Text {
    anchors.horizontalCenter: parent.horizontalCenter
    anchors.top: gameScene.gameWindowAnchorItem.top
    anchors.topMargin: 10
    color: "#a23aaf"
    font.pixelSize: 40
    text: "Move: " + (score - 2)
    font.family: "Adobe Arabic"
  }


  Component.onCompleted: {
    // fill the main array with empty spaces
    for(var i = 0; i < gridSizeGameSquared; i++)
      tileItems[i] = null

    // collect empty cells positions
    updateEmptyCells()

    // create 2 random tiles
    createNewTile()
    createNewTile()

    gameScene.state === "start"
    console.log("star")
  }

  EntityManager {
    id: entityManager
    entityContainer: gameContainer
  }


  Item {
    id: gameContainer
    width: gridWidth
    height: width // square so height = width
    anchors.centerIn: parent
    Background {}
  }

  Timer {
    id: moveRelease
    interval: 30
  }

  Keys.forwardTo: keyboardController
  Item {
    id: keyboardController

    Keys.onPressed: {
      if(!system.desktopPlatform)
        return

      if (event.key === Qt.Key_Left && moveRelease.running === false) {
        event.accepted = true
        moveLeft()
        moveRelease.start()
        console.log("move Left")
      }
      else if (event.key === Qt.Key_Right && moveRelease.running === false) {
        event.accepted = true
        moveRight()
        moveRelease.start()
        console.log("move Right")
      }
      else if (event.key === Qt.Key_Up && moveRelease.running === false) {
        event.accepted = true
        moveUp()
        moveRelease.start()
        console.log("move Up")
      }
      else if (event.key === Qt.Key_Down && moveRelease.running === false) {
        event.accepted = true
        moveDown()
        moveRelease.start()
        console.log("move Down")
      }
    }
  }



  MouseArea {

    id:mouseArea
    anchors.fill: gameScene.gameWindowAnchorItem

    property int startX // initial position X
    property int startY // initial position Y
    property string direction // direction of the swipe
    property bool moving: false


    onPressed: {
      startX = mouse.x //save initial position X
      startY = mouse.y //save initial position Y
      moving = false

    }
    // back button to leave scene
    MenuButton {
       height: 40
      text: "Return"
      // anchor the button to the gameWindowAnchorItem to be on the edge of the screen on any device
      anchors.right: parent.right
      anchors.rightMargin: 20
      anchors.top : parent.top
      anchors.topMargin: 10
      onClicked: {
        backButtonPressed()
        activeLevel = undefined
        activeLevelFileName = ""



      }
    }

    onReleased: {
      moving = false
    }

    onPositionChanged: {
        if(score == 12 ){


        }

      var deltax = mouse.x - startX
      var deltay = mouse.y - startY

      if (moving === false) {
        if (Math.abs(deltax) > 40 || Math.abs(deltay) > 40) {
          moving = true

          if (deltax > 30 && Math.abs(deltay) < 30 && moveRelease.running === false) {
            console.log("move Right")
            moveRight()
            moveRelease.start()
          }
          else if (deltax < -30 && Math.abs(deltay) < 30 && moveRelease.running === false) {
            console.log("move Left")
            moveLeft()
            moveRelease.start()
          }
          else if (Math.abs(deltax) < 30 && deltay > 30 && moveRelease.running === false) {
            console.log("move Down")
            moveDown()
            moveRelease.start()
          }
          else if (Math.abs(deltax) < 30 && deltay < 30 && moveRelease.running === false) {
            console.log("move Up")
            moveUp()       
            moveRelease.start()
          }
        }
      }
    }
  }

  function updateEmptyCells() {

    emptyCells = []

    for (var i = 0; i < gridSizeGameSquared; i++) {
      if(tileItems[i] === null)
        emptyCells.push(i)

    }
  }

  // creates new tile at random index(0-15)
  function createNewTile() {
      movemusic.play()
    var randomCellId = emptyCells[Math.floor(Math.random() * emptyCells.length)] // get random emptyCells
    var tileId = entityManager.createEntityFromUrlWithProperties(Qt.resolvedUrl("Tile.qml"), {"tileIndex": randomCellId}) // create new Tile with a referenceID
    tileItems[randomCellId] = entityManager.getEntityById(tileId) // paste new Tile to the array
    emptyCells.splice(emptyCells.indexOf(randomCellId), 1) // remove the taken cell from emptyCell array
      score++
  }

  function merge(soureRow) {
    var i, j
    var nonEmptyTiles = [] // dong cua grid rong
    var indices = []

    // remove zero elements
    for(i = 0; i < soureRow.length; i++) {
      indices[i] = nonEmptyTiles.length
      if(soureRow[i] > 0)
        nonEmptyTiles.push(soureRow[i])
    }

    var mergedRow = [] // sourceRow after it was merged

    for(i = 0; i < nonEmptyTiles.length; i++) {
      // push last element because there is no element after to be merged with
      if(i === nonEmptyTiles.length - 1)
        mergedRow.push(nonEmptyTiles[i])
      else {
        // comparing if values are mergeable
        if (nonEmptyTiles[i] === nonEmptyTiles[i+1]) {
          for(j = 0; j < soureRow.length; j++) {
            if(indices[j] > mergedRow.length)
              indices[j] -= 1
          }

          mergedRow.push(nonEmptyTiles[i] + 1)
          i++
        }
        else {
          // no merge, so follow normal order
          mergedRow.push(nonEmptyTiles[i])
        }
      }
    }

    // fill empty spots with zeroes
    for( i = mergedRow.length; i < soureRow.length; i++)
      mergedRow[i] = 0

    return {mergedRow : mergedRow, indices: indices}
  }

  function getRowAt(index) {
    var row  = []
    for(var j = 0; j < gridSizeGame; j++) {
      // if there are no tileItems at this spot we push(0) to the row, else push the tileIndex value
      if(tileItems[j + index * gridSizeGame] === null)
        row.push(0)
      else
        row.push(tileItems[j + index * gridSizeGame].tileValue)
    }
    return row
  }

  function moveLeft() {

    var isMoved = false // move happens not for a single cell but for a whole row
    var sourceRow, mergedRow, merger, indices
    var i, j
    bgmusic.stop()
    for(i = 0; i < gridSizeGame; i++) { // gridSizeGame is 4
      sourceRow = getRowAt(i)
      merger = merge(sourceRow)
      mergedRow = merger.mergedRow
      indices = merger.indices

      // checks if the given row is not the same as before
      if (!arraysIdentical(sourceRow, mergedRow)) {
        isMoved = true
        // merges and moves tileItems elements
        for(j = 0; j < sourceRow.length; j++) {
          // checks if an element is not empty
          if (sourceRow[j] > 0 && indices[j] !== j) {
            // checks if a merge has happened and at what position
            if (mergedRow[indices[j]] > sourceRow[j] && tileItems[gridSizeGame * i + indices[j]] !== null) {
              // Move, merge and increment value of the merged element
              tileItems[gridSizeGame * i + indices[j]].tileValue++ // incrementing the value of the tile that got merged
              tileItems[gridSizeGame * i + j].moveTile(gridSizeGame * i + indices[j]) // move second tile in the merge direction(will be visible only when all animations are set up)
              tileItems[gridSizeGame * i + j].destroyTile() // and destroy it
            } else {
              // Move only
              tileItems[gridSizeGame * i + j].moveTile(gridSizeGame * i + indices[j]) // move to the new position
              tileItems[gridSizeGame * i + indices[j]] = tileItems[gridSizeGame * i + j] // update the element inside the array
            }
            tileItems[gridSizeGame * i + j] = null // set to empty an old position of the moved tile
          }
        }
      }
    }

    if (isMoved) {
      // update empty cells
      updateEmptyCells()
      // create new random position tile
      createNewTile()
    }
  }

  function moveRight() {
    var isMoved = false
    var sourceRow, mergedRow, merger, indices
    var i, j, k // k used for reversing
    bgmusic.stop()
    for(i = 0; i < gridSizeGame; i++) {
      // reverse sourceRow
      sourceRow = getRowAt(i).reverse()
      merger = merge(sourceRow)
      mergedRow = merger.mergedRow
      indices = merger.indices

      if (!arraysIdentical(sourceRow,mergedRow)) {
        isMoved = true
        // reverse all other arrays as well
        sourceRow.reverse()
        mergedRow.reverse()
        indices.reverse()
        // recalculate the indices from the end to the start
        for (j = 0; j < indices.length; j++)
          indices[j] = gridSizeGame - 1 - indices[j]

        for(j = 0; j < sourceRow.length; j++) {
          k = sourceRow.length -1 - j

          if (sourceRow[k] > 0 && indices[k] !== k) {
            if (mergedRow[indices[k]] > sourceRow[k] && tileItems[gridSizeGame*i + indices[k]] !== null) {
              // Move and merge
              tileItems[gridSizeGame * i + indices[k]].tileValue++
              tileItems[gridSizeGame * i + k].moveTile(gridSizeGame * i + indices[k])
              tileItems[gridSizeGame * i + k].destroyTile()
            } else {
              // Move only
              tileItems[gridSizeGame * i + k].moveTile(gridSizeGame * i + indices[k])
              tileItems[gridSizeGame * i + indices[k]] = tileItems[gridSizeGame * i + k]
            }
            tileItems[gridSizeGame * i + k] = null
          }
        }
      }
    }

    if (isMoved) {
      // update empty cells
      updateEmptyCells()
      // create new random position tile
      createNewTile()
    }
  }

  function getColumnAt(index) {
    var column = []
    for(var j = 0; j < gridSizeGame; j++) {
      // if there are no tileItems at this spot we push(0) to the column, else push the tileIndex value
      if(tileItems[index + j * gridSizeGame] === null)
        column.push(0)
      else
        column.push(tileItems[index + j * gridSizeGame].tileValue)

    }
    return column
  }

  function moveUp() {
    var isMoved = false
    var sourceRow, mergedRow, merger, indices
    var i, j
      bgmusic.stop()
    for (i = 0; i < gridSizeGame; i++) {
      sourceRow = getColumnAt(i)
      merger = merge(sourceRow)
      mergedRow = merger.mergedRow
      indices = merger.indices

      if (! arraysIdentical(sourceRow,mergedRow)) {
        isMoved = true
        for (j = 0; j < sourceRow.length; j++) {
          if (sourceRow[j] > 0 && indices[j] !== j) {          
            // i and j are swapped when arranging tileItems
            if (mergedRow[indices[j]] > sourceRow[j] && tileItems[gridSizeGame * indices[j] + i] !== null) {
              // Move and merge
              tileItems[gridSizeGame * indices[j] + i].tileValue++
              tileItems[gridSizeGame * j + i].moveTile(gridSizeGame * indices[j] + i)
              tileItems[gridSizeGame * j + i].destroyTile()
            } else {
              // just move
              tileItems[gridSizeGame * j + i].moveTile(gridSizeGame * indices[j] + i)
              tileItems[gridSizeGame * indices[j] + i] = tileItems[gridSizeGame * j + i]
            }
            tileItems[gridSizeGame * j + i] = null
          }
        }
      }
    }

    if (isMoved) {
      // update empty cells
      updateEmptyCells()
      // create new random position tile
      createNewTile()
    }
  }

  function moveDown() {
    var isMoved = false
    var sourceRow, mergedRow, merger, indices
    var j, k
    bgmusic.stop()
    for (var i = 0; i < gridSizeGame; i++) {
      sourceRow = getColumnAt(i).reverse()
      merger = merge(sourceRow)
      mergedRow = merger.mergedRow
      indices = merger.indices

      if (! arraysIdentical(sourceRow,mergedRow)) {
        isMoved = true
        sourceRow.reverse()
        mergedRow.reverse()
        indices.reverse()

        for (j = 0; j < gridSizeGame; j++)
          indices[j] = gridSizeGame - 1 - indices[j]

        for (j = 0; j < sourceRow.length; j++) {
          k = sourceRow.length -1 - j

          if (sourceRow[k] > 0 && indices[k] !== k) {
            // keep in mind now we are working with COLUMNS NOT ROWS!
            // i and k will be swapped when arraning tileItems
            if (mergedRow[indices[k]] > sourceRow[k] && tileItems[gridSizeGame * indices[k] + i] !== null) {
              // Move and merge
              tileItems[gridSizeGame * indices[k] + i].tileValue++
              tileItems[gridSizeGame * k + i].moveTile(gridSizeGame * indices[k] + i)
              tileItems[gridSizeGame * k + i].destroyTile()

            } else {
              // Move only
              tileItems[gridSizeGame * k + i].moveTile(gridSizeGame * indices[k] + i)
              tileItems[gridSizeGame * indices[k] + i] = tileItems[gridSizeGame * k + i]
            }
            tileItems[gridSizeGame * k + i] = null
          }
        }
      }
    }

    if (isMoved) {
      // update empty cells
      updateEmptyCells()
      // create new random position tile
      createNewTile()
    }
  }

  function arraysIdentical(a, b) {
    var i = a.length
    if (i !== b.length) return false
    while (i--) {
      if (a[i] !== b[i]) return false
    }
    return true
  }

}

